-`Excavation Unit`)  %>%
filter(`Excavation Unit` != "TOTAL",
Species != "TOTAL") %>%
separate(value, c("mass",
"percentages"),
sep = " ")  %>%
mutate(percentages = as.numeric(gsub("\\(|\\)", # left bracket OR right bracket
"",
percentages)),
mass = as.numeric(mass))
# yes! done! very classic sequence of operations for preparing data for analysis
# 1) reshaping wide to long
# 2) splitting column to get data into its own column
# 3) remove non-numeric characters and convert to numeric
#  ---------------------------------------------------
#  ---------------------------------------------------
## Exploratory Data Analysis: plotting & interactivity
# - 5NP of ggplot2: histograms, bar plot, line plot, boxplots, scatter-plots
## Five named plots: histograms, bar plot, line plot, boxplots, scatter-plots  ##
# how to choose which plot for your data?
# - http://extremepresentation.typepad.com/blog/2006/09/choosing_a_good.html
# further reading:
# -  "Creating More Effective Graphs" by Naomi Robbins.
library(ggplot2) # good documentation at http://docs.ggplot2.org/current/ & http://www.cookbook-r.com/Graphs/
## 1. histogram ##
# good for showing the distribution of one variable
ggplot(jerimalai_lithics,
aes(Length)) +
geom_histogram()
ggplot(jerimalai_lithics_raw_materials,
aes(Material,
perc)) +
geom_col()
ggplot(jerimalai_lithics_raw_materials,
aes(reorder(Material, -perc),
perc)) +
geom_col()
ggplot(jerimalai_lithics_raw_materials,
aes(reorder(Material, perc),
perc)) +
geom_col() +
coord_flip()
ggplot(jerimalai_lithics_raw_materials,
aes(reorder(Material, perc),
perc)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.5))
ggplot(jerimalai_lithics_raw_materials,
aes(reorder(Material, perc),
perc)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.5)) +
xlab("Raw material type") +
ylab("Percentage")
ggplot(jerimalai_lithics_raw_materials,
aes(reorder(Material, perc),
perc)) +
geom_col() +
theme_bw(base_size = 14) +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.5)) +
xlab("Raw material type") +
ylab("Percentage")
ggplot(mjb_shells_long_numeric,
aes(x = `Excavation Unit`,
y = mass,
group = Species)) +
geom_line()
ggplot(mjb_shells_long_numeric,
aes(x = `Excavation Unit`,
y = mass,
group = Species,
colour = Species)) +
geom_line()
ggplot(mjb_shells_long_numeric,
aes(x = `Excavation Unit`,
y = mass,
group = Species,
colour = Species)) +
geom_line(size = 1.5)
ggplot(mjb_shells_long_numeric,
aes(x = `Excavation Unit`,
y = mass,
group = Species,
colour = Species)) +
geom_line(size = 1.5) +
theme_bw(base_size = 12)
ggplot(jerimalai_lithics,
aes(Material,
Weight)) +
geom_boxplot()
jerimalai_lithics_to_plot <-
jerimalai_lithics %>%
filter(Material != "NA")
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot()
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot() +
scale_y_log10()
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
sum(jerimalai_lithics_to_plot$Weight == 0 , na.rm = T)
jerimalai_lithics_to_plot <-
jerimalai_lithics %>%
filter(Weight != 0)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
sum(jerimalai_lithics_to_plot$Weight == 0 , na.rm = TRUE)
jerimalai_lithics_to_plot <-
jerimalai_lithics %>%
filter(Weight != 0)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material") +
ylab("Weight (g)")
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics,
aes(Material,
Weight)) +
geom_boxplot()
jerimalai_lithics_to_plot <-
jerimalai_lithics %>%
filter(Material != "NA")
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot()
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot() +
scale_y_log10()
ggplot(jerimalai_lithics_to_plot,
aes(Material,
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
sum(jerimalai_lithics_to_plot$Weight == 0 , na.rm = TRUE)
jerimalai_lithics_to_plot <-
jerimalai_lithics %>%
filter(Weight != 0)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4))
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material") +
ylab("Weight (g)")
library(scales)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10(labels = comma) +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material") +
ylab("Weight (g)")
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
scale_y_log10(labels = comma) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material")  +
ylab("Weight (g)")
library(ggforce)
ggplot(jerimalai_lithics_to_plot,
aes(reorder(Material, -Weight),
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.005) + # experiment with the value for alpha
scale_y_log10(labels = comma) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.4)) +
xlab("Raw Material")  +
ylab("Weight (g)")
ggplot(jerimalai_lithics_to_plot,
aes(Length,
Width)) +
geom_point()
ggplot(jerimalai_lithics_to_plot,
aes(Length,
Width,
colour = Material)) +
geom_point()
jerimalai_lithics_to_plot_raw_materials <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Chert",
"Volcanic",
"Silcrete"))
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
shape = Material)) +
geom_point()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material,
size = Weight)) +
geom_point()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material)) +
geom_point(size = 1)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material)) +
geom_point(size = 1)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width,
colour = Material)) +
geom_point(size = 1) +
geom_smooth()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width
)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth()
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width
)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm")
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width
)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm")
library(ggpmisc)
my.formula <- y ~ x
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width
)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm",
se = FALSE,
color = "black",
formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label..,
..rr.label..,
sep = "~~~")),
parse = TRUE)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Length,
Width
)) +
geom_point(aes(colour = Material),
size = 1) +
geom_smooth(method = "lm",
se = FALSE,
color = "black",
formula = my.formula) +
stat_poly_eq(formula = my.formula,
aes(label = paste(..eq.label..,
..rr.label..,
sep = "~~~")),
parse = TRUE) +
theme_bw() +
xlab("Length (mm)") +
ylab("Width (mm)")
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Width,
Length)) +    # plot
geom_point() +
geom_smooth(method = "lm") +
facet_wrap( ~ Material)
ggplot(jerimalai_lithics_to_plot_raw_materials,
aes(Width,
Length)) +    # plot
geom_point() +
geom_smooth(method = "lm") +
facet_wrap( ~ Material) +
coord_equal()
library(plotly) # excellent documentation at https://plot.ly/r/
j_silcrete <-
jerimalai_lithics_to_plot_raw_materials %>%
filter(Material == "Silcrete") %>%
ggplot(aes(Length,
Width)) +
geom_point()
ggplotly(j_silcrete)
j_silcrete <-
jerimalai_lithics_to_plot_raw_materials %>%
filter(Material == "Silcrete") %>%
ggplot(aes(Length,
Width)) +
geom_point(aes(text = paste("Spit: ", Spit)))
ggplotly(j_silcrete)
j_silcrete
ggsave(filename = "j_silcrete.png",
width = 10,
height = 10,
units = "cm",
dpi = 600) # not less than 300 for publication
jerimalai_lithics_to_plot_si_vo <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Silcrete",
"Volcanic"))
ggplot(jerimalai_lithics_to_plot_si_vo,
aes(Length)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y")
j_s_test1 <-
jerimalai_lithics_to_plot_si_vo %>%   # take the data frame...
split(.$Material) %>%                 # very similar to 'group_by'...
map(~ shapiro.test(.$Length))         # '.' stands for each data frame in the split
j_s_test1
j_s_test2 <-
jerimalai_lithics_to_plot_si_vo %>%
group_by(Material) %>%
by_slice(~tidy(shapiro.test(.$Length))) %>%
unnest()
j_s_test2
j_s_test2 <-
jerimalai_lithics_to_plot_si_vo %>%
group_by(Material) %>%
by_slice(~tidy(shapiro.test(.$Length))) %>%
unnest()
library(broom)
j_s_test2 <-
jerimalai_lithics_to_plot_si_vo %>%
group_by(Material) %>%
by_slice(~tidy(shapiro.test(.$Length))) %>%
unnest()
j_s_test2
wilcox.test(Length ~ Material,  # the ~ is the formular interface, we can read ~ as 'by'
data = jerimalai_lithics_to_plot_si_vo)
wilcox.test(Length ~ Material,  # the ~ is the formular interface, we can read ~ as 'by'
data = jerimalai_lithics_to_plot_si_vo)
with(jerimalai_lithics_to_plot_si_vo,
wilcox.test(Length ~ Material))
t.test(Length ~ Material,  # the ~ is the formula interface, we can read ~ as 'by'
data = jerimalai_lithics_to_plot_si_vo)
with(jerimalai_lithics_to_plot_si_vo,
t.test(Length ~ Material))
jerimalai_lithics_to_plot_4 <-
jerimalai_lithics_to_plot %>%
filter(Material %in% c("Silcrete",
"Volcanic",
"Chert",
"Quartzite"))
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y")
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y") +
scale_x_log10()
ggplot(jerimalai_lithics_to_plot_4,
aes(Material,
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.01) +
scale_y_log10()
ggplot(jerimalai_lithics_to_plot_4,
aes(Weight)) +
geom_histogram() +
facet_wrap( ~ Material,
ncol = 1,
scales = "free_y") +
scale_x_log10()
ggplot(jerimalai_lithics_to_plot_4,
aes(Material,
Weight)) +
geom_boxplot() +
geom_sina(alpha = 0.01) +
scale_y_log10()
with(jerimalai_lithics_to_plot_4,
kruskal.test(Weight ~ as.factor(Material)))
library(FSA)
my_dunn_test <-
with(jerimalai_lithics_to_plot_4,
dunnTest(Weight ~ as.factor(Material),
method="bh"))
my_dunn_test
str(my_dunn_test)
my_dunn_test$res
arrange(my_dunn_test$res, P.adj)
my_anova <-
with(jerimalai_lithics_to_plot_4,
aov(Weight ~ as.factor(Material)))
summary(my_anova)
my_tukeyhsd <- TukeyHSD(my_anova)
my_tukeyhsd
str(my_tukeyhsd)
library(broom)
tidy(my_tukeyhsd)
ktc_ceramic_data %>%
group_by(Context) %>%
summarise(sum_counts = sum(Counts))
ktc_ceramic_data %>%
mutate(Context = ifelse(grepl("L|U", Context), 7, Context)) %>%
group_by(Context) %>%
summarise(sum_counts = sum(Counts)) %>%
mutate(Context = as.numeric(Context))
install.packages("RecordLinkage")
